syntax = "proto3";
package ET;

//ResponseType A2C_LoginAccountResponse
message C2A_LoginAccountRequest // IRequest
{
	int32 RpcId       = 1;
	string Account = 2;
	string Password = 3;
}

message A2C_LoginAccountResponse // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	long AccountId = 4;
}

//ResponseType G2C_StartMatchResponse
message C2G_StartMatchRequest // IRequest
{
	int32 RpcId = 1;
    
    bool RobotMatch = 2;

}

message G2C_StartMatchResponse // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;

}


//ResponseType G2C_GetRankInfoResponse
message C2G_GetRankInfoRequest // IRequest
{
	int32 RpcId = 1;
}

message G2C_GetRankInfoResponse // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
    repeated GamePlayerInfo Ranks = 4;
}

//ResponseType G2C_GetRankInfoResponse
message C2G_PlayerEditInfoRequest // IRequest
{
	int32 RpcId = 1;
	string Name = 2;
	int64 AccountId = 3;
}

message G2C_PlayerEditInfoResponse // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}




//ResponseType G2C_PlayerExitMatchResponse
message C2G_PlayerExitMatchRequest // IRequest
{
	int32 RpcId = 1;
}

message G2C_PlayerExitMatchResponse // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
    int64 UserID = 4;
}

message C2G_PlayerExitRoomMessage // IMessage
{
	long RoomID = 1;
	long UserID = 2;
}

message C2M_PlayerExitRoom // IActorLocationMessage
{
	int32 RpcId = 1;
}




message C2M_FrogOpera // IActorLocationMessage
{
	int32 RpcId = 1;
	int32 opera = 2;
	float chargeTime = 3;
	bool force = 4;
    int32 dir = 5;
}

message M2C_FrogOpera // IActorMessage
{
	int64 Id = 1;
	int32 opera = 2;
    float chargeTime = 3;
    bool force = 4;
    int32 dir = 5;
}



message C2M_FrogSyncPosition // IActorLocationMessage
{
	int32 RpcId = 1;
	Unity.Mathematics.float3 Position = 2;
	int64 UserId = 3;
	int32 CameraIndex = 4;
}

message M2C_FrogSyncPosition // IActorMessage
{
	int64 Id = 1;
    Unity.Mathematics.float3 Position = 2;
    int32 CameraIndex = 3; 
}

message C2M_FrogGameOver // IActorLocationMessage
{
	int32 RpcId = 1;
	int64 UserId = 2;
	int32 JumpCnt = 3;
}

message M2C_FrogGameOver // IActorMessage
{
	int64 WinPlayerId = 1;
    int64 GameTime = 2;
    int32 JumpCnt = 3;
    int64 BestTime = 4;
    string PlayerName = 5;
    int32 WinCnt = 6;
}

message C2G_GameOverMessage // IMessage
{
     long RoomID = 1;
}






////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//demo follow



message HttpGetRouterResponse
{
	repeated string Realms = 1;
	repeated string Routers = 2;
}

message RouterSync
{
	uint32 ConnectId = 1;
	string Address = 2;
}

//ResponseType M2C_TestResponse
message C2M_TestRequest // IActorLocationRequest
{
	int32 RpcId = 1;
	string request = 2;
}

message M2C_TestResponse // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	string response = 4;
}

//ResponseType Actor_TransferResponse
message Actor_TransferRequest // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 MapIndex = 2;
}

message Actor_TransferResponse // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_EnterMap
message C2G_EnterMap // IRequest
{
	int32 RpcId = 1;
}

message G2C_EnterMap // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	// 自己unitId
	int64 MyId = 4;
}

message MoveInfo
{
	repeated Unity.Mathematics.float3 Points = 1;
	Unity.Mathematics.quaternion Rotation = 2;
	int32 TurnSpeed = 3;
}

message UnitInfo
{
	int64 UnitId = 1;
	int32 ConfigId = 2;
	int32 Type = 3;
	Unity.Mathematics.float3 Position = 4;
	Unity.Mathematics.float3 Forward = 5;
	map<int32, int64> KV = 6;
	MoveInfo MoveInfo = 7;
	int64 UserId = 8;
	int64 RoomId = 9;
	int64 PlayerId = 10;
	string PlayerName = 11;
}

message GamePlayerInfo
{
	int64 AccountId = 1;
	string NickName = 2;
	int32 Wins = 3;
	int32 Loses = 4;
	int64 Coin = 5;
	int64 BestTime = 6;
	int64 BestJumpCnt = 7;
}

message M2C_CreateUnits // IActorMessage
{
	repeated UnitInfo Units = 1;
}

message M2C_CreateMyUnit // IActorMessage
{
	repeated UnitInfo Units = 1;
}

message M2C_StartSceneChange // IActorMessage
{
	int64 SceneInstanceId = 1;
	string SceneName = 2;	
	int64 MyId = 3;
}

message M2C_RemoveUnits // IActorMessage
{
	repeated int64 Units = 2;
}

message C2M_PathfindingResult // IActorLocationMessage
{
	int32 RpcId = 1;
	Unity.Mathematics.float3 Position = 2;
}

message C2M_Stop // IActorLocationMessage
{
	int32 RpcId = 1;
}

message M2C_PathfindingResult // IActorMessage
{
	int64 Id = 1;
	Unity.Mathematics.float3 Position = 2;
	repeated Unity.Mathematics.float3 Points = 3;
}

message M2C_Stop // IActorMessage
{
	int32 Error = 1;
	int64 Id = 2;
	Unity.Mathematics.float3 Position = 3;
	Unity.Mathematics.quaternion Rotation = 4;
}

//ResponseType G2C_Ping
message C2G_Ping // IRequest
{
	int32 RpcId = 1;
}

message G2C_Ping // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 Time = 4;
}


message G2C_Test // IMessage
{
}

message G2C_Reconnect // IMessage
{

}

//ResponseType M2C_Reload
message C2M_Reload // IRequest
{
	int32 RpcId = 1;
	string Account = 2;
	string Password = 3;
}

message M2C_Reload // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}



//ResponseType R2C_Login
message C2R_Login // IRequest
{
	int32 RpcId = 1;
	string  Account = 2;  // 帐号
	string  Password = 3;  // 密码
}

message R2C_Login // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	string Address = 4;
	int64 Key = 5;
	int64 GateId = 6;
    GamePlayerInfo PlayerInfo = 7;
}

//ResponseType G2C_LoginGate
message C2G_LoginGate // IRequest
{
	int32 RpcId = 1;
	int64 Key = 2;  // 帐号
	int64 GateId = 3;
	GamePlayerInfo PlayerInfo = 4;
}

message G2C_LoginGate // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 PlayerId = 4;
}

message G2C_TestHotfixMessage // IMessage
{
	string Info = 1;
}

//ResponseType M2C_TestRobotCase
message C2M_TestRobotCase // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 N = 2;
}

message M2C_TestRobotCase // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 N = 4;
}

//ResponseType M2C_TransferMap
message C2M_TransferMap // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_TransferMap // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_Benchmark
message C2G_Benchmark // IRequest
{
	int32 RpcId = 1;
}

message G2C_Benchmark // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}