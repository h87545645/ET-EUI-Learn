syntax = "proto3";
// using 

package ET;


//ResponseType M2G_PlayerEnterMatchResponse
message G2M_PlayerEnterMatchRequest // IActorRequest
{
    int32 RpcId = 1;
    long PlayerID = 2;
    long UserID = 3;
    long SessionID = 4;

}

message M2G_PlayerEnterMatchResponse // IResponse
{
    int32 RpcId = 1;
    int32 Error = 2;
    string Message = 3;

}

//ResponseType M2G_CreateRoomResponse
message G2M_CreateRoomRequest // IActorRequest
{
    int32 RpcId = 1;

}

message M2G_CreateRoomResponse // IActorResponse
{
    int32 RpcId = 1;
    int32 Error = 2;
    string Message = 3;
    long RoomID = 4;
}

//ResponseType M2G_PlayerEnterRoomResponse
message G2M_PlayerEnterRoomRequest // IActorRequest
{
    int32 RpcId = 1;
    int64 ActorId = 2;
    long PlayerID = 3;
    long UserID = 4;
    long SessionID = 5;
    long RoomID = 6;
    long OldInstanceId = 5;
}

message M2G_PlayerEnterRoomResponse // IActorResponse
{
    int32 RpcId = 1;
    int32 Error = 2;
    string Message = 3;
    long GamerID = 4;
 
}

//ResponseType A2R_LoginAccountResponse
message R2A_LoginAccountRequest // IActorRequest
{
	int32 RpcId       = 1;
	string Account = 2;
	string Password = 3;
}

message A2R_LoginAccountResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	long AccountId = 4;
}







////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//demo follow

//ResponseType ObjectQueryResponse
message ObjectQueryRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 InstanceId = 3;
}

//ResponseType A2M_Reload
message M2A_Reload // IActorRequest
{
	int32 RpcId = 1;
}

message A2M_Reload // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2G_LockResponse
message G2G_LockRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Id = 2;
	string Address = 3;
}

message G2G_LockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2G_LockReleaseResponse
message G2G_LockReleaseRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Id = 2;
	string Address = 3;
}

message G2G_LockReleaseResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectAddResponse
message ObjectAddRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 InstanceId = 3;
}

message ObjectAddResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectLockResponse
message ObjectLockRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 InstanceId = 3;
	int32 Time = 4;
}
message ObjectLockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectUnLockResponse
message ObjectUnLockRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 OldInstanceId = 3;
	int64 InstanceId = 4;
}
message ObjectUnLockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectRemoveResponse
message ObjectRemoveRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
}
message ObjectRemoveResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectGetResponse
message ObjectGetRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
}
message ObjectGetResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 InstanceId = 4;
}

//ResponseType G2R_GetLoginKey
message R2G_GetLoginKey // IActorRequest
{
	int32 RpcId = 1;
	string Account = 2;
	long AccountId = 3;
}

message G2R_GetLoginKey // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 Key = 4;
	int64 GateId = 5;
}

message G2M_SessionDisconnect // IActorLocationMessage
{
	int32 RpcId = 1;
}

message ObjectQueryResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes Entity = 4;
}

message UnitComp
{
	repeated bytes Entitys = 1;
}

//ResponseType M2M_UnitTransferResponse
message M2M_UnitTransferRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 OldInstanceId = 2;
	bytes Unit = 3;
	bool robot = 4;
	bytes Room = 5;
	repeated UnitComp unitComp = 6;
	repeated bytes Entitys = 7;
}

message M2M_UnitTransferResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}